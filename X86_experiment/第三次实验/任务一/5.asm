EXTRN GA1:BYTE, CHANGE:BYTE, CO_NAME:BYTE, N:ABS, RANK:WORD
PUBLIC WAN3,WAN4,WAN5,MESS1,MESS2,MESS3,MESS4,MESS5,MESS6
.386
DATA SEGMENT USE16 PARA PUBLIC 'D1'
MESS1 DB 'DISCOUNT: $'
MESS2 DB 'COST PRICE: $'
MESS3 DB 'MARKINT PRICE: $'
MESS4 DB 'COST AMOUNT: $'
MESS5 DB 'MARKINT AMOUNT: $'
MESS6 DB 'SUGGEST: $'
MESS7 DB 0dh,0ah,'$'
MESS8 DB 'RANK: $'
MESS9 DB 'CUCALUTE IS OK$'
MESS10 DB 'RANK IS OK$'

DATA ENDS
STACK SEGMENT USE16 PARA STACK 'STACK'
	DB 200 DUP(0)
STACK ENDS

WRITE1 MACRO A
		LEA DX,A
		MOV AH,9
		INT 21H
		ENDM

CODE SEGMENT USE16 PARA PUBLIC 'CODE'
	ASSUME DS:DATA,SS:STACK,CS:CODE

		MOV AX,DATA
		MOV DS,AX


WAN3 PROC
		PUSHAD
		MOV DI,N 
		LEA SI,GA1
		JUMPCOUNT: 
		MOVSX EAX,WORD PTR [SI+11]
	    IMUL EAX,1280 ;使用三十二位寄存器，防止溢出
	    MOVSX EDX,WORD PTR [SI+13]
	    MOVSX ECX,BYTE PTR [SI+10]
	    IMUL ECX,EDX
		MOV EDX,EAX
		SHR EDX,16
	    IDIV CX
	    MOV BX,AX
	   
	   
	    ;MOV EAX,0
	    ;MOV ECX,0
	    MOVSX EAX,WORD PTR [SI+17]
	    ;MOV CL,128
	    ;IMUL EAX,ECX
		SAL EAX,7
	    MOVSX ECX,WORD PTR 15[SI];
		MOV EDX,EAX
		SHR EDX,16
	    IDIV CX
	    ADD BX,AX
		MOV [SI+19],BX
		ADD SI, 21
		DEC DI
		JNE JUMPCOUNT
		
		WRITE1 MESS9
		
		WRITE1 MESS7
		
		POPAD
		RET

WAN3 ENDP

WAN4 PROC
		PUSHAD
		
		MOV DI,N          ;填满数值
		LEA SI,GA1
		LEA BX,RANK
		JUMPWAN5:
		MOV [BX],SI
		ADD BX,3
		ADD SI,21
		DEC DI
		JNE JUMPWAN5
			
		MOV DI,N-1
	JUMPWAN51:MOV AX,DI
		LEA BX, RANK
	JUMPWAN53:
		MOV DX,BX
		MOV SI,[BX]
		MOV CX,[SI+19]
		MOV SI,	[BX+3]
		MOV SI,[SI+19]
		CMP CX, SI
		JGE JUMPWAN512
		MOV BX,DX
		MOV DX,[BX]
		MOV SI,[BX+3]
		MOV [BX],SI
		MOV [BX+3],DX
		
		JUMPWAN512:
				ADD BX,3
				DEC AX
				JNE JUMPWAN53
				DEC DI
				JE JUMPWAN523
				JMP JUMPWAN51
JUMPWAN523:	
	MOV AL,1
		MOV CX,N-1
		LEA BX,RANK
		MOV [BX+2],BYTE PTR 1
		JUMPWAN513:
		MOV SI,[BX+3];
		MOV DI,[SI+19]
		MOV SI,[BX]
		MOV SI,[SI+19]
		CMP SI,DI
		JE   JUMPWAN515
		
		JUMPWAN514: INC AL
		JUMPWAN515: MOV [BX+5],AL
		ADD BX,3
		DEC CX
		JNE JUMPWAN513
		
		
		WRITE1 MESS10
		
		WRITE1 MESS7
		
		POPAD
		RET
WAN4 ENDP



WAN5 PROC
		PUSHA
		MOV CX,N
		LEA SI,RANK
		WAN51:
		MOV DI,[SI]
		
		WRITE1 MESS7
		
		CALL OUTGOOD
		
		WRITE1 MESS7

		
		LEA DX,MESS1
		MOVSX BX,BYTE PTR[DI+10]
		CALL OUTPRI
		
		WRITE1 MESS7

		
		LEA DX,MESS2
		MOV BX, [DI+11]
		CALL OUTPRI
		
		WRITE1 MESS7
		
		LEA DX,MESS3
		MOV BX, [DI+13]
		CALL OUTPRI
		
		WRITE1 MESS7
		
		LEA DX,MESS4
		MOV BX, [DI+15]
		CALL OUTPRI
		
		WRITE1 MESS7
		
		LEA DX,MESS5
		MOV BX,[DI+17]
		CALL OUTPRI
		
		WRITE1 MESS7

		
		LEA DX,MESS6
		MOV BX, [DI+19]
		CALL OUTPRI
		
		
		WRITE1 MESS7
		
		LEA DX,MESS8
		MOVSX BX, BYTE PTR [SI+2]
		CALL OUTPRI
		
		WRITE1 MESS7
		
		ADD SI,3
		DEC CX
		JNE WAN51
		
		POPA
		RET
WAN5 ENDP


OUTGOOD PROC
		PUSH SI
		MOV BX,DI
	OUT2:CMP BYTE PTR [BX],0
		JE OUTGOOD1
		MOV DL,[BX]
		MOV AH,2
		INT 21H
		INC BX
		JMP OUT2 
		
		OUTGOOD1:
		POP SI
		RET
OUTGOOD ENDP

OUTPRI PROC
		MOV AH,9		;输出提示
		INT 21H
		MOV AX,BX
		CALL  DTOC
		RET
OUTPRI ENDP 


DTOC PROC               ;将数字转换为字符串输出,ax为传入的数字
	PUSH DX
	PUSH CX
	PUSH SI
	PUSH BX
	MOV BX,0	;bx在子程序中用来存放位数
	
DTOC0:
	MOV CX,10D	
	MOV DX,0
	DIV CX		;除以10
	MOV CX,AX	;得到的商赋给cx
	JCXZ DTOC1	;当前商为0则调到s2
	ADD DX,30H	;将余数加上30H得到相应的ASCII码
	PUSH DX
	INC BX
	JMP DTOC0
	
DTOC1:			;当商为0时,余数为个位
	ADD  DX,30H
	PUSH DX
	INC  BX		;再进行一次栈操作(补充当商为0而余数不为0时的情况)
	MOV  CX,BX 
	
DTOC2:			;将栈中的字符打印出来
	POP AX
	MOV DL,AL
	MOV AH,2
	INT 21H
	LOOP DTOC2
	
DTOC3:
	POP BX
	POP SI
	POP CX
	POP DX
	MOV AH,2        ;打印空格
	MOV DL,32
	INT 21H
	ret
DTOC ENDP


CODE ENDS
END


		
		
	