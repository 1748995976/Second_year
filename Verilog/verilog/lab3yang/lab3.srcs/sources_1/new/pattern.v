`timescale 1ns / 1ps

module pattern(code, patt);
input [3: 0] code;
output [7:0] patt;
reg [7:0] S;
assign patt = S;
always@(code)
	begin
    case (code)
        4'h00 : S[7:0] <= 8'b11000000;
        4'h01 : S[7:0] <= 8'b11111001;
        4'h02 : S[7:0] <= 8'b10100100;
        4'h03 : S[7:0] <= 8'b10110000;
        4'h04 : S[7:0] <= 8'b10011001;
        4'h05 : S[7:0] <= 8'b10010010;
        4'h06 : S[7:0] <= 8'b10000010;
        4'h07 : S[7:0] <= 8'b11111000;
        4'h08 : S[7:0] <= 8'b10000000;
        4'h09 : S[7:0] <= 8'b10011000;
        4'h0A : S[7:0] <= 8'b10001000;
        4'h0B : S[7:0] <= 8'b10000011;
        4'h0C : S[7:0] <= 8'b11000110;
        4'h0D : S[7:0] <= 8'b10100001;
        4'h0E : S[7:0] <= 8'b10000110;
        4'h0F : S[7:0] <= 8'b10001110;
    endcase
    end
endmodule

